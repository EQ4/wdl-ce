{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww18500\viewh10540\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\b\fs24 \cf0 WDL-CE IPlug Examples\

\b0 \
This folder contains example/template projects to demonstrate how to use different features of IPlug and WDL. They also serve as a testbed to make sure that the various aspects of the framework are working.\
\
Some of these examples are based on examples provided by Theo Niessink (Tale).\
\
Projects are available for MSVC (Visual Studio Express 2010), Xcode3 (or higher) and Codeblocks/Mingw. To build 64 bit on windows you need to use MSVC and have installed the Windows SDK 7.1. You need to copy the required files from the Steinberg VST2 SDK to the VST_SDK in order to compile.\
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}IPlugEffect - The most basic IPlug plugin, similar to AGain in the vst2 sdk\
{\listtext	\uc0\u8259 	}IPlugMidiEffect - a midi controlled effect plugin (a midi gate), showing how to handle MIDI messages sample accurately\
{\listtext	\uc0\u8259 	}IPlugInstrument - a basic monophonic IPlug synth, showing how to handle MIDI messages sample accurately\
{\listtext	\uc0\u8259 	}IPlugMultiChannel - demos a multi-channel IPlug plugin, and how to test if channels are connected\
{\listtext	\uc0\u8259 	}IPlugChunks - show how to use chunks in a plugin. Chunks allow you to store arbitrary data in the plugin's state as apposed to a single-precision value for each parameter.\
{\listtext	\uc0\u8259 	}IPlugControls - GUI plugin which demos the various IControl classes\
{\listtext	\uc0\u8259 	}\
{\listtext	\uc0\u8259 	}IPlugVerbEngine - demos WDL_ReverbEngine() - simple reverb based on Freeverb\
{\listtext	\uc0\u8259 	}IPlugResampler - demos WDL_Resampler() - LGPL for resampling audio\
{\listtext	\uc0\u8259 	}IPlugConvoEngine - demos WDL_ConvolutionEngine() - WDL's fast convolution engine\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 \

\b Duplicating Projects\
\

\b0 The IPlugExamples folder contains a python script to duplicate an IPlug project. This allows you to very quickly create a new project based on one of the examples. It does a multiple file find and replace to substitute the new name of the project for the old name, and also to change the manufacturer name. Once you have done this you only need to change two more things, by hand in resource.h to make your plugin unique.\
\
you can duplicate a project as follows with the following commands in the OSX terminal or on the windows command prompt. In this example i will copy the IPlugEffect project to a new project called MyNewPlugin\'85\
\
- open terminal or cmd.exe and navigate to the IPlugExamples folder\
- type \

\i\b 	duplicate.py [inputprojectname] [outputprojectname] [manufacturername]\

\i0\b0 \
e.g\
	
\i\b duplicate.py IPlugEffect MyNewPlugin OliLarkin\

\i0\b0 \
you might need to do 
\i\b ./duplicate.py
\i0\b0  on OSX\
\
- open 
\b MyNewPlugin/resource.h
\b0  and change PLUG_UNIQUE_ID and PLUG_MFR_ID\
\
}